1)
package main

import (
    "fmt"
    "math"
)

type geometry interface {
    area() float64
    perim() float64
}

type rect struct {
    width, height float64
}
type circle struct {
    radius float64
}

func (r rect) area() float64 {
    return r.width * r.height
}
func (r rect) perim() float64 {
    return 2*r.width + 2*r.height
}

func (c circle) area() float64 {
    return math.Pi * c.radius * c.radius
}
func (c circle) perim() float64 {
    return 2 * math.Pi * c.radius
}

func measure(g geometry) {
    fmt.Println(g)
    fmt.Println(g.area())
    fmt.Println(g.perim())
}

func main() {
    r := rect{width: 10, height: 2}
    c := circle{radius: 3}

    measure(r)
    measure(c)
}

OUTPUT:-

{10 2}
20
24
{3}
28.274333882308138
18.84955592153876


2)

package main 
  
import "fmt"
 
type tank interface { 
 
    Tarea() float64 
    Volume() float64 
} 
  
type myvalue struct { 
    radius float64 
    height float64 
} 

func (m myvalue) Tarea() float64 { 
  
    return 2*m.radius*m.height + 
        2*3.14*m.radius*m.radius 
} 
  
func (m myvalue) Volume() float64 { 
  
    return 3.14 * m.radius * m.radius * m.height 
} 

func main() { 
 
    var t tank 
    t = myvalue{5, 15} 
    fmt.Println("Area:", t.Tarea()) 
    fmt.Println("Volume:", t.Volume()) 
} 

OUTPUT:-

Area : 307
Volume: 1177.5

3)

package main 
  
import "fmt"
  

type tank interface { 

    Tarea() float64 
    Volume() float64 
} 
  
func main() { 
  
    var t tank 
    fmt.Println("Value interface: ", t) 
    fmt.Printf("Type interface : %T ", t) 
} 

OUTPUT:-
 
Value interface:  <nil>
Type interface : <nil> 